---
- name: Verify
  hosts: all
  become: true
  vars:
    mariadb_root_password: "molecule_test_password"
  tasks:
    - name: Check if MariaDB service is running
      ansible.builtin.service_facts:
      register: service_state
    
    - name: Get service name based on OS family
      ansible.builtin.set_fact:
        mariadb_service_name: >-
          {{ 'mariadb.service' if ansible_os_family == 'Debian' else 'mariadb' }}

    - name: Verify MariaDB service is running
      ansible.builtin.assert:
        that:
          - "mariadb_service_name in service_state.ansible_facts.services"
          - >-
            service_state.ansible_facts.services[mariadb_service_name].state == 'running'
        fail_msg: "MariaDB service is not running"
        success_msg: "MariaDB service is running"

    - name: Check backup script exists
      ansible.builtin.stat:
        path: "{{ mariadb_backup_dir }}/mysql_backup.sh"
      register: backup_script

    - name: Verify backup script exists and is executable
      ansible.builtin.assert:
        that:
          - backup_script.stat.exists
          - backup_script.stat.executable
        fail_msg: "Backup script does not exist or is not executable"
        success_msg: "Backup script exists and is executable"

    - name: Check for backup files
      ansible.builtin.find:
        paths: "{{ mariadb_backup_dir }}"
        patterns: "*.sql*"
        recurse: yes
      register: backup_files

    - name: Verify backup files exist
      ansible.builtin.assert:
        that: backup_files.matched > 0
        fail_msg: "No backup files were found"
        success_msg: "{{ backup_files.matched }} backup files were found"

    - name: Check backup cron job
      ansible.builtin.shell: crontab -l
      register: cron_contents
      changed_when: false

    - name: Verify backup cron job is configured
      ansible.builtin.assert:
        that: "'mysql_backup.sh' in cron_contents.stdout"
        fail_msg: "Backup cron job is not configured"
        success_msg: "Backup cron job is correctly configured"

    - name: Simulate database corruption and restore from backup
      block:
        - name: Drop test table
          ansible.builtin.shell: >
            mysql -u root -p{{ mariadb_root_password }} backup_test_db -e "DROP TABLE test_table;"
          changed_when: true

        - name: Verify table is gone
          ansible.builtin.shell: >
            mysql -u root -p{{ mariadb_root_password }} backup_test_db -e "SHOW TABLES LIKE 'test_table';"
          register: table_check
          changed_when: false
          failed_when: "'test_table' in table_check.stdout"

        - name: Get most recent backup file
          ansible.builtin.shell: >
            find {{ mariadb_backup_dir }} -name "*.sql*" -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d" "
          register: latest_backup
          changed_when: false

        - name: Extract backup if compressed
          ansible.builtin.shell: >
            {% if latest_backup.stdout.endswith('.gz') %}
            gunzip -c {{ latest_backup.stdout }} > /tmp/backup_restore.sql
            {% else %}
            cp {{ latest_backup.stdout }} /tmp/backup_restore.sql
            {% endif %}
          changed_when: true
          when: latest_backup.stdout != ""

        - name: Restore from backup
          ansible.builtin.shell: >
            mysql -u root -p{{ mariadb_root_password }} backup_test_db < /tmp/backup_restore.sql
          changed_when: true
          when: latest_backup.stdout != ""

        - name: Check if table was restored
          ansible.builtin.shell: >
            mysql -u root -p{{ mariadb_root_password }} backup_test_db -e "SELECT COUNT(*) FROM test_table;"
          register: restored_data
          changed_when: false
          when: latest_backup.stdout != ""

        - name: Verify data was restored
          ansible.builtin.assert:
            that: "'3' in restored_data.stdout"
            fail_msg: "Data was not properly restored from backup"
            success_msg: "Data was successfully restored from backup"
          when: latest_backup.stdout != ""