---
name: Ansible Role CI
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  schedule:
    - cron: '0 6 * * 0'  # Run every Sunday at 6 AM UTC

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-22.04
    steps:
      - name: Check out the codebase
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible-lint==6.22.1 yamllint==1.32.0

      - name: Run linting
        run: |
          yamllint .
          ansible-lint --profile min

  molecule:
    name: Molecule
    runs-on: ubuntu-22.04
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        ansible:
          - "7.0.0"
          - "7.6.0"
        scenario:
          - default
          - multi-instance
        distro:
          - ubuntu2204
          - debian11
    env:
      PY_COLORS: '1'
      ANSIBLE_FORCE_COLOR: '1'
      MOLECULE_DISTRO: ${{ matrix.distro }}

    steps:
      - name: Check out the codebase
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible==${{ matrix.ansible }} molecule==6.0.2 molecule-plugins[docker]==23.5.0 docker==6.1.3

      - name: Run Molecule tests
        run: molecule test -s ${{ matrix.scenario }}

  additional-scenarios:
    name: Additional Scenarios
    runs-on: ubuntu-22.04
    needs: molecule
    strategy:
      fail-fast: false
      matrix:
        scenario:
          - backup
          - monitoring
          - version-matrix
    env:
      PY_COLORS: '1'
      ANSIBLE_FORCE_COLOR: '1'
      MOLECULE_DISTRO: ubuntu2204

    steps:
      - name: Check out the codebase
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible==7.6.0 molecule==6.0.2 molecule-plugins[docker]==23.5.0 docker==6.1.3

      - name: Run Molecule tests
        run: molecule test -s ${{ matrix.scenario }}

  supported-distros:
    name: Test Supported Distros
    runs-on: ubuntu-22.04
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        distro:
          - ubuntu2204
          - ubuntu2004
          - debian12
          - debian11
          - rockylinux9
          - rockylinux8
    env:
      PY_COLORS: '1'
      ANSIBLE_FORCE_COLOR: '1'
      MOLECULE_DISTRO: ${{ matrix.distro }}

    steps:
      - name: Check out the codebase
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible==7.6.0 molecule==6.0.2 molecule-plugins[docker]==23.5.0

      - name: Run Molecule tests
        run: molecule test

  docker:
    name: Docker Test
    runs-on: ubuntu-22.04
    needs: [molecule, supported-distros]
    steps:
      - name: Check out the codebase
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build the Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: true
          tags: mariadb-ansible-test:latest

      - name: Start Docker services
        run: |
          mkdir -p config
          touch config/custom.cnf  # Create empty file
          docker-compose up -d
          sleep 15  # Give services time to start properly

      - name: Test MariaDB container
        run: |
          docker-compose exec -T mariadb mysql -u root -proot -e "SHOW DATABASES;"
          docker-compose exec -T mariadb mysql -u root -proot -e "SELECT VERSION();"

      - name: Clean up Docker services
        run: docker-compose down

  docker-replication:
    name: Docker Replication Test
    runs-on: ubuntu-22.04
    needs: docker
    steps:
      - name: Check out the codebase
        uses: actions/checkout@v4

      - name: Create required directories
        run: |
          mkdir -p tests/config
          mkdir -p config

      - name: Create test config files
        run: |
          echo "[mysqld]" > tests/config/primary.cnf
          echo "server-id = 1" >> tests/config/primary.cnf
          echo "log-bin = mysql-bin" >> tests/config/primary.cnf
          
          echo "[mysqld]" > tests/config/replica.cnf
          echo "server-id = 2" >> tests/config/replica.cnf
          echo "read_only = ON" >> tests/config/replica.cnf
          
          touch config/custom.cnf  # Create empty file

      - name: Build Docker images
        run: |
          docker build -t mariadb-ansible-test .
          docker build -t mariadb-test -f tests/Dockerfile.test .

      - name: Start replication containers
        run: |
          docker-compose --profile test up -d mariadb-primary mariadb-replica
          sleep 30  # Give services time to start properly and initialize replication

      - name: Test replication
        run: docker-compose --profile test run --rm test-replication

      - name: Clean up Docker services
        run: docker-compose --profile test down -v